{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>My name is Julia Smith. As a member of STEMteresting (Team 301), I am responsible for designing and integrating the sensor subsystem. This includes selecting an appropriate I\u00b2C-based distance sensor, ensuring compatibility with the ESP32-S3-WROOM-1-N4, and implementing UART communication for subsystem messaging. Additionally, I support programming, real-time data transmission, and coordination with the actuation and display subsystems. </p> <p>Email: jasmi157@asu.edu </p>"},{"location":"#datasheet-distance-sensor-subsystem","title":"\ud83d\udcda Datasheet: Distance Sensor Subsystem","text":"<ul> <li> Block Diagram </li> <li> Component Selection </li> <li> MCC Configuration </li> <li> Power Budget </li> <li> Schematic </li> <li> Bill of Materials </li> <li> API </li> </ul>"},{"location":"#team-webpage","title":"\ud83d\udc65 Team Webpage","text":"<ul> <li> Team Page </li> </ul>"},{"location":"api/","title":"API","text":""},{"location":"api/#overview","title":"Overview","text":"<p>The tables below describe the messages sent from the distance sensor subsystem (ESP32) using <code>uint8_t</code> binary flags (<code>0</code> = False, <code>1</code> = True) or ASCII-encoded numerical data. All messages are formatted using a standardized 64-byte UART protocol and occupy the data field (bytes 5\u201361) of the message frame.</p>"},{"location":"api/#message-tables","title":"Message Tables","text":""},{"location":"api/#safety-response-message-to-motor","title":"Safety Response Message (to Motor)","text":"<p>This message indicates whether the user is currently in a safe position based on distance readings.</p> Field Value Byte 1 <code>User_Safe_Flag</code> Variable Type <code>uint8_t</code> Min Value <code>0</code> (User Not Safe) Max Value <code>1</code> (User Safe) Example <code>1</code> Purpose Controls braking behavior of the motor subsystem"},{"location":"api/#oled-display-message-to-oled","title":"OLED Display Message (to OLED)","text":"<p>This message instructs the OLED display what message to show depending on system state.</p> Field Value Byte 1 <code>OLED_Display_Flag</code> Variable Type <code>uint8_t</code> Min Value <code>0</code> (Display 'Stand on X') Max Value <code>1</code> (Display 'Initializing') Example <code>0</code> Purpose Communicates screen status to user"},{"location":"api/#distance-data-message-to-xander-heafeys-subsystem","title":"Distance Data Message (to Xander Heafey's Subsystem)","text":"<p>This message transmits the measured distance in millimeters as an ASCII-encoded string.</p> Field Value Bytes 1\u2013N ASCII-encoded distance in mm Variable Type <code>bytes</code> Example <code>\"325\"</code> Purpose Provides real-time distance to Xander\u2019s subsystem for logging or analytics"},{"location":"api/#machine-use-status-message-to-wifi","title":"Machine Use Status Message (to WiFi)","text":"<p>This message indicates whether the machine is currently in use or idle.</p> Field Value Byte 1 <code>Machine_Use_Status</code> Variable Type <code>uint8_t</code> Min Value <code>0</code> (Idle) Max Value <code>1</code> (In Use) Example <code>1</code> Purpose Broadcasts usage status to the WiFi subsystem"},{"location":"api/#esp32-file-overview","title":"ESP32 File Overview","text":"<p>This project implements the firmware for the distance sensor subsystem using an ESP32 microcontroller. It continuously reads distance values from the VL53L1X sensor and transmits structured UART messages to the motor, OLED, and WiFi subsystems.</p>"},{"location":"api/#files","title":"Files","text":"<ul> <li>ESP32 VL53L1X Firmware (Zip)</li> </ul>"},{"location":"api/#key-features","title":"Key Features","text":"<ul> <li> <p>UART Messaging Protocol   Each message follows the class-defined structure: <code>[Prefix1] [Prefix2] [Sender] [Receiver] [Message Type/Data...] [Suffix1] [Suffix2]</code>   All messages are framed with <code>AZ</code> (prefix) and <code>YB</code> (suffix) and padded to 64 bytes if needed.</p> </li> <li> <p>Subsystem Communication   This subsystem transmits:</p> </li> <li>ASCII distance string \u2013 to Xander (Data Logger)</li> <li>Binary safety flag \u2013 to Motor subsystem</li> <li>Binary display flag \u2013 to OLED subsystem</li> <li> <p>Binary machine-use flag \u2013 to WiFi module</p> </li> <li> <p>Distance Logic   The system reads distance via I\u00b2C from the VL53L1X sensor. Thresholds are applied to determine if the user is standing in a safe zone.</p> </li> <li> <p>Framing and Filtering   Messages not addressed to the ESP32 are forwarded along the daisy-chain bus. Malformed or duplicate messages are filtered out.</p> </li> <li> <p>Timing and Buffer Management   Includes timeout handling, garbage cleanup, and scheduled message transmission via <code>uasyncio</code>.</p> </li> </ul> Additional Links and Files <ul> <li>Code Repository File</li> <li>Home</li> <li>Team Page</li> </ul>"},{"location":"billofmaterials/","title":"Bill of Materials","text":""},{"location":"billofmaterials/#overview","title":"Overview","text":"<p>This document outlines the components used in the I2C Distance Sensor Subsystem project, including their part numbers, descriptions, and Digi-Key links.</p>"},{"location":"billofmaterials/#bill-of-materials_1","title":"Bill of MaterialsAdditional Links","text":"<ul> <li>Bill of Materials Spreadsheet</li> <li>Bill of Materials PDF</li> <li>Home</li> <li>Team Page</li> </ul>"},{"location":"blockdiagram/","title":"Block Diagram","text":""},{"location":"blockdiagram/#block-diagram-of-subsystem-distance-sensor","title":"Block Diagram of Subsystem: Distance SensorAdditional Links","text":"<p>This is the block diagram for our distance sensor subsystem. The sensor will wait for user input from the external OLED subsytem by Xander Heafey. Once the user input is received, the distance sensor will be in the \"on\" state. Distastance data will be collected and transmitted to the external Motor Driver Subsystem by Sara Bohart to initiate motor rotations at speeds which correlate with the collected distance data.  </p> <p></p> <ul> <li>Block Diagram Link</li> <li>Block Diagram PDF</li> <li>Home</li> <li>Team Page</li> </ul>"},{"location":"charts/","title":"Charts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"componentselection/","title":"Component Selection","text":"<p>This document compares and justifies the selection of major electrical components used in my subsystem. All components are surface-mount and suitable for hand-soldering or reflow, based on Peralta lab constraints.</p>"},{"location":"componentselection/#33v-voltage-regulator","title":"3.3V Voltage Regulator","text":""},{"location":"componentselection/#option-1-lm2575d2t-33r4g-332","title":"Option 1: LM2575D2T-3.3R4G \u2013 $3.32","text":"Pros Cons 1A output current capacity Large footprint Fixed 3.3V simplifies design Requires external diode and inductor Easy to hand solder (TO-263-5) Less efficient than modern buck converters Previously used in other circuits"},{"location":"componentselection/#option-2-tps62152rgtr-142","title":"Option 2: TPS62152RGTR \u2013 $1.42","text":"Pros Cons Compact package saves board space QFN package difficult to solder by hand Low cost Requires multiple external passives Fixed output simplifies design No in-class experience with part"},{"location":"componentselection/#option-3-lm3671mf-33nopb-156","title":"Option 3: LM3671MF-3.3/NOPB \u2013 $1.56","text":"Pros Cons Smallest footprint of the three Max output only 500 mA SOT-23-5 package is easier to solder than QFN Narrow input voltage range (2.7\u20135.5V) Low quiescent current <p>\u2705 Final Selection: LM2575D2T-3.3R4G Chosen due to my familiarity with the component and the ease of soldering. While larger, it fits within our board space and supplies 1A, ensuring headroom for future expansion.</p>"},{"location":"componentselection/#microcontroller-selection","title":"Microcontroller Selection","text":"<p>This section compares three microcontroller options for the subsystem: the ESP32-S3-WROOM-1-N4 (final selection), the PIC18F47Q10 (original classroom-based choice), and the ESP32-WROOM-32 (a popular alternative ESP variant). The comparison focuses on communication flexibility, compatibility with I2C peripherals, ease of development, and solderability.</p>"},{"location":"componentselection/#esp32-s3-wroom-1-n4-506","title":"ESP32-S3-WROOM-1-N4 \u2013 $5.06","text":"Specs Value Package PCB surface-mount module Supply Voltage Range 3.0\u20133.6 V Max Current 500 mA Max GPIO Current 40 mA per pin Interfaces UART, I2C, SPI, ADC, PWM, GPIO Wireless Wi-Fi + BLE External Interrupts Supported Pros Cons Flexible I2C pin assignments Slightly higher power consumption Built-in Wi-Fi + BLE Slightly more expensive Fast dev cycle using MicroPython or Arduino Community support and driver libraries"},{"location":"componentselection/#pic18f47q10-300","title":"PIC18F47Q10 \u2013 ~$3.00","text":"Specs Value Package TQFP-44 or DIP Supply Voltage Range 1.8\u20135.5 V Max Current ~200 mA Max GPIO Current ~25 mA per pin Interfaces UART, I2C, SPI, ADC, PWM, GPIO Wireless None External Interrupts Supported Pros Cons Familiar from in-class labs No built-in wireless Wide voltage input range Fewer libraries and slower development Supported by MCC in MPLAB X Limited RAM and speed Easy to solder and test in lab Not as flexible with I2C/SPI pins"},{"location":"componentselection/#esp32-wroom-32ue-n4-440","title":"ESP32-WROOM-32UE-N4 \u2013 $4.40","text":"Specs Value Package PCB surface-mount module Supply Voltage Range 2.3\u20133.6 V Max Current ~500 mA Max GPIO Current 40 mA per pin Interfaces UART, I2C, SPI, ADC, PWM, GPIO Wireless Wi-Fi + BLE (U.FL external antenna) External Interrupts Supported CPU Dual-core Xtensa @ 240 MHz Flash 4 MB RAM 520 KB Pros Cons U.FL connector for external antenna improves wireless signal in enclosures Fewer hardware instructions compared to S3 Dual-core performance for multitasking Fewer GPIOs due to flash memory sharing pins Lower cost than ESP32-S3-WROOM-1-N4 No vector instructions or advanced acceleration Well-supported in Arduino and ESP-IDF Slightly older architecture with fewer new libraries <p>Why Not Chosen: While the ESP32-WROOM-32UE-N4 offers excellent wireless connectivity with an external antenna and a similar power envelope to the S3, it lacks some critical performance features. Most notably, it does not support vector instructions or hardware acceleration required for advanced peripherals. Additionally, GPIO allocation is less flexible due to internal flash wiring, which increases the risk of pin conflicts. Given our system's reliance on reliable I\u00b2C communication and the potential need for multiple peripherals, the S3\u2019s improved I/O multiplexing and library compatibility made it the better fit for our design.</p>"},{"location":"componentselection/#comparison-table","title":"Comparison Table","text":"Feature ESP32-S3-WROOM-1-N4 ESP32-WROOM-32 PIC18F47Q10 Wireless Wi-Fi + BLE Wi-Fi + BLE \u274c None I2C Pin Flexibility Any GPIO Limited Limited Development Environment MicroPython / Arduino Arduino / ESP-IDF MPLAB X + MCC Processing Power Dual-core w/ vector ops Dual-core Single-core Memory (RAM / Flash) 512KB RAM / 8MB Flash 520KB / 4MB 4KB RAM / 64KB Flash Power Consumption Higher Medium Low Ease of Use in Lab Moderate High (dev boards) High Community / Library Support Extensive Strong Moderate Price $5.06 ~$4.50 ~$3.00 <p>\u2705 Final Selection: ESP32-S3-WROOM-1-N4 This microcontroller was chosen for its combination of power, flexibility, and compatibility. It supports all needed communication protocols (especially I2C) with flexible GPIO assignment, integrates Wi-Fi and BLE for potential future use, and is backed by strong community support. While it is slightly more expensive than the other two options, its ability to simplify both firmware and hardware integration justifies the cost in the context of our design needs.</p>"},{"location":"componentselection/#distance-sensor","title":"Distance Sensor","text":""},{"location":"componentselection/#vl53l1x-adafruit-3967-1495","title":"VL53L1X \u2013 Adafruit 3967 \u2013 $14.95","text":"<p>\\</p> Pros Cons Up to 4m range More expensive than analog options Millimeter-level accuracy Requires initialization/config I2C interface for easy integration Library support available for ESP32"},{"location":"componentselection/#option-2-vl53l0x-1250","title":"Option 2: VL53L0X \u2013 ~$12.50","text":"Pros Cons Lower cost 2m max range only Good library support Less suited for large distance Small module"},{"location":"componentselection/#option-3-sparkfun-vl6180-time-of-flight-distance-sensor-qwiic-1395","title":"Option 3: SparkFun VL6180 Time-of-Flight Distance Sensor \u2013 Qwiic \u2013 $13.95","text":"Pros Cons I\u00b2C communication via Qwiic connector Shorter range (0\u2013200 mm) Well-documented Arduino and ESP32 libraries Less accurate at longer distances Compact and low power consumption Easy integration with other Qwiic-compatible devices <p>This option is useful in applications where close-range detection is sufficient and rapid setup is preferred due to the Qwiic system\u2019s plug-and-play design. While it lacks the extended range of the VL53L1X, it offers reliable performance in short-distance sensing tasks and fully meets the I\u00b2C communication requirement.</p> <p>\u2705 Final Selection: VL53L1X Selected for its accuracy, compatibility with our ESP32-based subsystem, and wide sensing range. Surface-mount breakout simplifies PCB integration and library support accelerates development.</p>"},{"location":"componentselection/#final-major-components-selected","title":"Final Major Components SelectedAdditional Links","text":"Component Part Number Source Unit Price Voltage Regulator LM2575D2T-3.3R4G DigiKey $3.32 Microcontroller ESP32-S3-WROOM-1-N4 DigiKey $5.06 Distance Sensor VL53L1X (Adafruit 3967) DigiKey $14.95 <p>These components meet the project's design goals for sensor control, data processing, and communication. Their solderability and known compatibility with each other ensured fast prototyping and successful integration.</p> <ul> <li>Home</li> <li>Team Page</li> </ul>"},{"location":"mccconfiguration/","title":"MCC Configuration","text":""},{"location":"mccconfiguration/#overview","title":"Overview","text":"<p>This section details the MPLAB Code Configurator (MCC) setup for the subsystem, including I\u00b2C communication, GPIO pin assignments, and peripheral configurations.  </p> <p>It outlines how the PIC18F47Q10 microcontroller is set as the I\u00b2C Master to communicate with the distance sensors and how debugging LEDs are configured as digital outputs.  </p>"},{"location":"mccconfiguration/#mcc-configuration_1","title":"MCC Configuration","text":""},{"location":"mccconfiguration/#pin-assignments","title":"Pin Assignments","text":""},{"location":"mccconfiguration/#application-builder","title":"Application Builder","text":""},{"location":"mccconfiguration/#full-screen-view","title":"Full Screen View","text":"Additional Links <ul> <li>MPLabs Zip File</li> <li>Home</li> <li>Team Page</li> </ul>"},{"location":"powerbudget/","title":"Power Budget","text":""},{"location":"powerbudget/#overview","title":"Overview","text":"<p>The power budget page outlines the estimated power consumption for each component  in my subsystem for this project, ensuring that my power supply can reliably support the system. </p> <p>It details the voltage and current requirements for the microcontroller, sensors,  voltage regulator, and debugging LEDs. </p> <p>This analysis helps optimize battery life, prevent overloading, and ensure stable  operation under all conditions.</p>"},{"location":"powerbudget/#power-budget_1","title":"Power BudgetAdditional Links","text":"<ul> <li>Power Budget Spreadsheet</li> <li>Power Budget PDF</li> <li>Home</li> <li>Team Page</li> </ul>"},{"location":"schematic/","title":"Schematic","text":""},{"location":"schematic/#overview","title":"Overview","text":"<p>The schematic illustrates the electrical connections and components of my subsystem,  including the microcontroller, sensors, voltage regulator, and and debugging components. </p> <p>It defines how signals and power are distributed, ensuring proper operation and  integration of all hardware. </p>"},{"location":"schematic/#schematic_1","title":"Schematic","text":""},{"location":"schematic/#pcb-top-layer","title":"PCB Top Layer","text":""},{"location":"schematic/#pcb-bottom-layer","title":"PCB Bottom Layer","text":""},{"location":"schematic/#pcb-3d-view","title":"PCB 3D ViewAdditional Links","text":"<ul> <li>Altium Project Zip File</li> <li>Schematic PDF</li> <li>Home</li> <li>Team Page</li> </ul>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"Index","text":"<p>title: Welcome tags: - tag1 - tag2</p>"},{"location":"subfolder/#hello-my-name-is-julia-smith","title":"Hello, my name is Julia Smith","text":"<ul> <li>List item 1</li> <li>List item 2</li> </ul> <p>name | description as above | 000 so below | 111</p>"},{"location":"subfolder/#here-is-a-sub-heading","title":"Here is a sub heading","text":"<ol> <li>step 1 </li> <li>step 2</li> </ol> <p>Things to discuss</p>"}]}